name: release
on:
  push:
    branches: [ master ]
jobs:
  build:
    name: Build
    outputs: 
      project_name: ${{ steps.pom.outputs.name }}
      project_version: ${{ steps.pom.outputs.version }}
      sonar_organization: ${{ steps.pom.outputs.organization }}
      sonar_gate_result: ${{ steps.sonar_analyze_result.outputs.result }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
        
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Extract project name in Maven pom.xml file
        id: pom
        run: |
          echo ::set-output name=name::$(grep "<name>" pom.xml | awk -F "name" '{gsub(">|</","",$0); print $2;}')
          echo ::set-output name=version::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)          
          echo ::set-output name=organization::$(grep "<sonar.organization>" pom.xml | awk -F "sonar.organization" '{gsub(">|</","",$0); print $2;}')
        # echo ::set-output name=name_old::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.name}' --non-recursive exec:exec)          
      - name: Maven-pom.xml 
        run: |
          echo "Project name: ${{ steps.pom.outputs.name }}"
          echo "Sonar organization: ${{ steps.pom.outputs.organization }}" 
          
      - name: Build and sonar analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          RESULT=$( mvn -B clean verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
                      -Dsonar.projectKey=${{ steps.pom.outputs.organization }}_${{ steps.pom.outputs.name }} \
                      -Dsonar.qualitygate.wait=true \
                      -Dmaven.test.skip=true \
                  )
          echo ::set-output name=result::$( echo $RESULT | grep -o "QUALITY GATE STATUS: PASSED" || echo " Status" ) 


  CheckSonarQualityGateResult:
    name: CheckSonarQualityGateResult
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Get current date
        id: date
        run: |
          echo "::set-output name=date::$(date +'%Y-%m-%d')"
          echo ${{ needs.build.outputs.sonar_gate_result }}
          
      - name: Check Quality Gate result and Login Build, Push and Deploy
        env:
          COMMIT_VAR: ${{ contains(needs.build.outputs.sonar_gate_result, 'PASSED') }}
        run: |
          if ${COMMIT_VAR} == true ; then
              echo "Evet"
          else
              echo "Sonar quality gate is failed."
    # ::exit::failure
          fi
          


  CreateRelease:
    name: CreateRelease
    runs-on: ubuntu-latest
    needs: CheckSonarQualityGateResult
    outputs:
      sha_short: ${{ steps.commit_hash.outputs.sha_short }}
    steps:
      - name: Extract short_sha project version
        id: commit_hash
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Generate Relase number
        run: |
          echo "RELEASE_VERSION=${{ needs.build.outputs.project_name }}.${{ needs.build.outputs.project_version }}.${{ steps.commit_hash.outputs.sha_short }}" >> $GITHUB_ENV

      - name: Create Releaseasdas
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: Release ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false


